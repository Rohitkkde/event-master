"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userController_1 = __importDefault(require("../Controller/userController"));
const vendorController_1 = __importDefault(require("../Controller/vendorController"));
const multer_1 = __importDefault(require("multer"));
const bookingController_1 = __importDefault(require("../Controller/bookingController"));
const paymentController_1 = __importDefault(require("../Controller/paymentController"));
const vendorTypeController_1 = __importDefault(require("../Controller/vendorTypeController"));
const livecontroller_1 = __importDefault(require("../Controller/livecontroller"));
//middleware
const UserAuth_1 = __importDefault(require("../Middleware/UserAuth"));
const router = express_1.default.Router();
const storage = multer_1.default.memoryStorage();
const upload = (0, multer_1.default)({ storage: storage });
router.post('/signup', userController_1.default.UserSignup);
router.post('/verify', userController_1.default.verifyOtp);
router.get('/resendOtp', userController_1.default.ResendOtp);
router.post('/login', userController_1.default.UserLogin);
router.get('/logout', userController_1.default.UserLogout);
router.get('/getUser', userController_1.default.getUser);
router.post('/getotp', userController_1.default.UserForgotPassword);
router.post('/verify-otp', userController_1.default.VerifyOtpForPassword);
router.post('/resetpassword', userController_1.default.ResetUserPassword);
router.post('/refresh-token', userController_1.default.createRefreshToken);
router.get('/getvendors', vendorController_1.default.getAllVendors);
router.get('/getVendor', vendorController_1.default.getVendor);
router.post('/google/login', userController_1.default.UseGoogleLogin);
router.post('/google/register', userController_1.default.UseGoogleRegister);
router.post('/add-Favorite-Vendor', UserAuth_1.default, userController_1.default.AddFavVendor);
router.get('/get-favorite-vendor', UserAuth_1.default, userController_1.default.getFavoriteVendors);
router.patch('/updatePassword', UserAuth_1.default, userController_1.default.UpdatePasswordController);
router.post('/addVendorReview', UserAuth_1.default, vendorController_1.default.addVendorReview);
router.put('/updateProfile', upload.single('image'), UserAuth_1.default, userController_1.default.UpdateProfileDetails);
router.post('/bookevent', UserAuth_1.default, bookingController_1.default.bookAnEvent);
router.get('/get-bookings', UserAuth_1.default, bookingController_1.default.getBookingsByUser);
router.post('/create-checkout-session', UserAuth_1.default, paymentController_1.default.makePayment);
router.post('/add-payment', UserAuth_1.default, paymentController_1.default.addPayment);
router.get('/single-booking', UserAuth_1.default, bookingController_1.default.getBookingsById);
router.patch('/MarkAsRead', UserAuth_1.default, userController_1.default.MarkRead);
router.patch('/markCancel', UserAuth_1.default, bookingController_1.default.cancelBooking);
router.get('/getVendorTypes', vendorTypeController_1.default.getVendorTypes);
router.post('/subscribe', userController_1.default.subscribe);
router.get('/get-live', UserAuth_1.default, livecontroller_1.default.getLive);
router.post('/add-live', UserAuth_1.default, livecontroller_1.default.addLive);
router.patch('/change-live-status', UserAuth_1.default, livecontroller_1.default.changeLiveStatus);
router.patch('/ClearAll', UserAuth_1.default, userController_1.default.clearAllNotifications);
exports.default = router;
